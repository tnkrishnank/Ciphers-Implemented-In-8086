;DESIGNED BY : 20PC22 NAVIN KRISHNA
;              20PC37 VETRIVEL M D

INCLUDE 'EMU8086.INC'

ORG 100H

START DW 0500H
NEWL  DB 0AH
CRET  DB 0DH
KEY   DB ?
COUNT DB ?
CHK   DB ?
LAST  DW ?

PROMPT_INPUT  DW 'ENTER THE STRING: ', 0
PROMPT_1      DW '1 ATBASH', 0
PROMPT_2      DW '2 RAILFENCE', 0
PROMPT_3      DW '3 ROUTE', 0
PROMPT_TYPE   DW 'ENTER YOUR CHOICE: ', 0
PROMPT_ERROR  DW 'INVALID CHOICE !!!', 0
PROMPT_KEY    DW 'ENTER THE KEY: ', 0
PROMPT_OUTPUT DW 'OUTPUT: ', 0

DEFINE_PRINT_STRING

.CODE

MAIN PROC

    LEA SI, PROMPT_INPUT
    CALL PRINT_STRING    

    MOV SI, START

;GETTING STRING INPUT CHARACTER BY CHARACTER
INPUT:

    MOV AH, 1
    INT 21H

    CMP AL, CRET
    JZ SET_COUNT

    MOV BYTE PTR [SI], AL
    INC SI

    JMP INPUT

;SETTING NUMBER OF CHARACTERS IN STRING TO REGISTER CX
SET_COUNT:

    MOV CX, SI
    SUB CX, START

;CHOOSING A CIPHER TECHNIQUE
CIPHER:

    ;PRINTING A NEWLINE
    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    LEA SI, PROMPT_1
    CALL PRINT_STRING

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    LEA SI, PROMPT_2
    CALL PRINT_STRING

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    LEA SI, PROMPT_3
    CALL PRINT_STRING

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    LEA SI, PROMPT_TYPE
    CALL PRINT_STRING

    MOV AH, 1
    INT 21H

    CMP AL, 31H
    JZ ATBASH

    CMP AL, 32H
    JZ RAILFENCE

    CMP AL, 33H
    JZ ROUTE

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    LEA SI, PROMPT_ERROR
    CALL PRINT_STRING

    JMP CIPHER

;ATBASH CIPHER
ATBASH:

    MOV SI, START
    MOV DX, CX

;HAVING SEPARATE JUMPS FOR DIFFERENT CHARACTERS
ATBASH_ENC:

    MOV BL, BYTE PTR [SI]

    CMP BL, 7BH
    JGE ATBASH_OTHER

    CMP BL, 61H
    JGE ATBASH_LOWER

    CMP BL, 5BH
    JGE ATBASH_OTHER

    CMP BL, 41H
    JGE ATBASH_UPPER

    CMP BL, 00H
    JGE ATBASH_OTHER

;ATBASH FOR UPPERCASE CHARACTERS
ATBASH_UPPER:

    MOV AX, 009BH
    MOV BH, 0
    SUB AX, BX
    MOV BYTE PTR [SI], AL

    CMP DX, 0
    JZ SET_SI

    DEC DX
    INC SI

    JMP ATBASH_ENC

;ATBASH FOR UPPERCASE CHARACTERS
ATBASH_LOWER:

    MOV AX, 00DBH
    MOV BH, 0
    SUB AX, BX
    MOV BYTE PTR [SI], AL

    CMP DX, 0
    JZ SET_SI

    DEC DX
    INC SI

    JMP ATBASH_ENC

;ATBASH FOR NON ALPHABETICAL CHARACTERS
ATBASH_OTHER:

    MOV BYTE PTR [SI], 5FH

    CMP DX, 0
    JZ SET_SI

    DEC DX
    INC SI

    JMP ATBASH_ENC

;RAILFENCE CIPHER
RAILFENCE:

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    LEA SI, PROMPT_KEY
    CALL PRINT_STRING

    MOV AH, 1
    INT 21H

    MOV KEY, AL
    SUB KEY, 30H
    MOV COUNT, 01H

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    LEA SI, PROMPT_OUTPUT
    CALL PRINT_STRING

    MOV SI, START
    MOV BX, START
    ADD BX, CX
    SUB BX, 1
    MOV LAST, BX

;CHECKING FOR ADDRESS OVERFLOW AND PRINTING THE ENCRYPTED TEXT
RAILFENCE_ENC:

    MOV BX, LAST
    CMP SI, BX
    JG RAILFENCE_DO

    JMP RAILFENCE_CONTINUE

RAILFENCE_DO:

    INC COUNT

    MOV AL, KEY
    CMP COUNT, AL
    JG EXIT

    MOV SI, START
    MOV AX, 0000H
    MOV AL, COUNT
    SUB AL, 1
    ADD SI, AX
    MOV CHK, 00H

;DIFFERENT JUMPS FOR START, END AND MIDDLE ROWS
RAILFENCE_CONTINUE:

    MOV AH, 2
    MOV DL, BYTE PTR [SI]
    INT 21H

    CMP COUNT, 01H
    JZ RAILFENCE_S_OR_E

    MOV AL, KEY

    CMP COUNT, AL
    JZ RAILFENCE_S_OR_E

    CMP CHK, 00H
    JZ RAILFENCE_LEFT

    CMP CHK, 01H
    JZ RAILFENCE_RIGHT

;RAILFENCE FOR START OR END ROWS
RAILFENCE_S_OR_E:

    MOV AX, 0000H
    MOV AL, KEY
    MOV BL, 2
    MUL BL
    SUB AL, 2
    ADD SI, AX
    JMP RAILFENCE_ENC

;RAILFENCE FOR ELEMENTS IN LEFT TO RIGHT SLIDE
RAILFENCE_LEFT:

    MOV AX, 0000H
    MOV AL, KEY
    SUB AL, COUNT
    MOV BL, 2
    MUL BL
    ADD SI, AX
    MOV CHK, 01H
    JMP RAILFENCE_ENC

;RAILFENCE FOR ELEMENTS IN LEFT TO RIGHT CLIMB
RAILFENCE_RIGHT:

    MOV AX, 0000H
    MOV AL, COUNT
    SUB AL, 1
    MOV BL, 2
    MUL BL
    ADD SI, AX
    MOV CHK, 00H
    JMP RAILFENCE_ENC

;ROUTE CIPHER
ROUTE:

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    LEA SI, PROMPT_OUTPUT
    CALL PRINT_STRING

    MOV BL, 1

;FINDING THE SIZE OF SQUARE MATRIX
ROUTE_CONTINUE:

    MOV AL, BL
    MUL AL
    INC BL

    CMP AX, CX
    JL ROUTE_CONTINUE

    DEC BL

    MOV KEY, BL

    MOV CHK, 00H
    MOV SI, START

;TRAVERSE THROUGH THE 2D MATRIX AND DISPLAY THE ENCRYPTED TEXT
ROUTE_OUTER:

    MOV AH, 2
    MOV DL, BYTE PTR [SI]
    INT 21H

    MOV AX, 0000H
    MOV AL, KEY
    ADD SI, AX

ROUTE_INNER:

    MOV AH, 2
    MOV DL, BYTE PTR [SI]
    INT 21H

    MOV AX, 0000H
    MOV AL, KEY
    ADD SI, AX

    MOV AX, SI
    SUB AX, START

    CMP AX, CX
    JL ROUTE_INNER

    INC CHK

    MOV AX, 0000H
    MOV AL, CHK
    MOV SI, START
    ADD SI, AX

    MOV AX, 0000H
    MOV AL, CHK
    CMP AL, KEY

    JL ROUTE_OUTER

JMP EXIT

;SETTING THE START ADDRESS TO PRINT THE STRING
SET_SI:

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    MOV AH, 2
    MOV DL, NEWL
    INT 21H

    MOV AH, 2
    MOV DL, CRET
    INT 21H

    LEA SI, PROMPT_OUTPUT
    CALL PRINT_STRING

    MOV SI, START

;DIPLAY THE STRING
DISPLAY:

    MOV AH, 2
    MOV DL, BYTE PTR [SI]
    INT 21H

    CMP CX, 1
    JZ EXIT

    DEC CX
    INC SI

    JMP DISPLAY

EXIT:

END MAIN

RET